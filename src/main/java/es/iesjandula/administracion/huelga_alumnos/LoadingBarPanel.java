/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package es.iesjandula.administracion.huelga_alumnos;

import java.awt.Toolkit;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author David Martinez
 *
 */
public class LoadingBarPanel extends javax.swing.JFrame
{
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel jLabel1;
	private javax.swing.JProgressBar jProgressBarLoad;

	// End of variables declaration//GEN-END:variables
	/**
	 * Constructor for create new LoadingBarPanel
	 */
	public LoadingBarPanel()
	{
		this.initComponents();
		this.starLoadAnimation();
		this.setIconImage(Toolkit.getDefaultToolkit().getImage("./images/jandula.png"));
		this.setTitle("LOADING...");
		this.setResizable(false);
		this.setLocationRelativeTo(null);
	}

	private void starLoadAnimation()
	{

		Thread loadAnimation = new Thread(new Runnable()
		{
			@Override
			public void run()
			{

				int speed = 1;

				while (true)
				{
					for (int i = 0; i < 100; i++)
					{
						try
						{
							LoadingBarPanel.this.jProgressBarLoad
									.setValue(LoadingBarPanel.this.jProgressBarLoad.getValue() + speed);
							Thread.sleep(10);
						}
						catch (InterruptedException ex)
						{
							Logger.getLogger(Huelga.class.getName()).log(Level.SEVERE, null, ex);
						}
					}
					for (int i = 0; i < 100; i++)
					{
						try
						{
							LoadingBarPanel.this.jProgressBarLoad
									.setValue(LoadingBarPanel.this.jProgressBarLoad.getValue() + (speed * -1));
							Thread.sleep(10);
						}
						catch (InterruptedException ex)
						{
							Logger.getLogger(Huelga.class.getName()).log(Level.SEVERE, null, ex);
						}
					}
				}
			}
		}

		);
		loadAnimation.start();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents()
	{

		this.jProgressBarLoad = new javax.swing.JProgressBar();
		this.jLabel1 = new javax.swing.JLabel();

		this.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		this.jProgressBarLoad.setForeground(new java.awt.Color(0, 193, 6));

		this.jLabel1.setText("LOADING...");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this.getContentPane());
		this.getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap().addComponent(this.jLabel1)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(this.jProgressBarLoad, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(19, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup().addContainerGap()
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
						.addComponent(this.jProgressBarLoad, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(this.jLabel1))
				.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		this.pack();
	}// </editor-fold>//GEN-END:initComponents
}
